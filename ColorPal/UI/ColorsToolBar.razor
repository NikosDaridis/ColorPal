@implements IDisposable

<div class="flex items-center justify-between">

    @foreach (ColorToolType tool in Enum.GetValues(typeof(ColorToolType)))
    {
        <ColorTool Id="colorTool"
                   IconPath=@($"Icons/{tool.GetValue()}.svg")
                   IconSize=Size.Small
                   IconTextFilter=true
                   HandleClick=@(e => HandleColorToolClick(tool))
                   IsActive=@(_activeColorTool == tool.GetValue()) />
    }

    <select class="w-13 h-8 items-center justify-center rounded-md bg-[var(--secondary-color)] p-2 text-sm text-[var(--text-color)] focus:outline-none focus:ring-0"
            id="colorsPerLine"
            @onchange=HandleColorsPerLineChangeAsync>

        <option value="5">5</option>
        <option value="6">6</option>
        <option value="7">7</option>
        <option value="8">8</option>
        <option value="9">9</option>
        <option value="10">10</option>
    </select>
</div>

@code {
    [Parameter]
    public IJSRuntime? JSRuntime { get; set; }

    [Parameter]
    public LocalStorageService? LocalStorageService { get; set; }

    [Parameter]
    public EventAggregator<string>? EventAggregator { get; set; }

    private string? _activeColorTool { get; set; }

    private string _colorsPerLine { get; set; } = "5";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Console.WriteLine(typeof(ColorTool).IsEnum);

        if (JSRuntime is null || LocalStorageService is null || EventAggregator is null)
            return;

        EventAggregator.GetService(Event.EyedropperPick).Subscribe(HandleEyedropperPickAsync);

        _colorsPerLine = await LocalStorageService.GetKeyAsync<string>(StorageKey.ColorsPerLine) ?? "5";

        await JSRuntime.InvokeVoidAsync("setSelectValue", "colorsPerLine", _colorsPerLine);
    }

    private void HandleColorToolClick(ColorToolType tool)
    {
        if (tool == ColorToolType.Move || tool == ColorToolType.TintsShades || tool == ColorToolType.Delete)
        {
            if (_activeColorTool == tool.GetValue())
                _activeColorTool = null;
            else
                _activeColorTool = tool.GetValue();
        }
        else
            _activeColorTool = null;
    }

    private async Task HandleEyedropperPickAsync(string eyedropperColor)
    {
        _activeColorTool = null;
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Sets colors per line to local storage and publishes the event
    /// </summary>
    private async Task HandleColorsPerLineChangeAsync(ChangeEventArgs e)
    {
        _colorsPerLine = e.Value?.ToString() ?? "5";

        if (LocalStorageService is null)
            return;

        await LocalStorageService.SetKeyAsync(StorageKey.ColorsPerLine, _colorsPerLine);

        if (EventAggregator is null)
            return;

        await EventAggregator.GetService(Event.ColorsPerLine).PublishAsync(_colorsPerLine);
    }

    public void Dispose()
    {
        if (EventAggregator is null)
            return;

        EventAggregator.GetService(Event.EyedropperPick).Unsubscribe(HandleEyedropperPickAsync);
    }
}
