@implements IDisposable

<button class="@GetTabHighlightClass() @GetTextClass() inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 font-medium"
        id=@($"colorCodeTab-{Name}")
        @ref=_button
        @onclick=HandleOnClickAsync>
    @Name
</button>

@code {
    [Parameter]
    public string? Name { get; set; }

    [Parameter]
    public bool IsActive { get; set; }

    [Parameter]
    public EventCallback HandleClick { get; set; }

    [Parameter]
    public EventAggregator<string>? EventAggregator { get; set; }

    private ElementReference _button;

    /// <summary>
    /// Subscribes to events
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        EventAggregator?.GetService(Event.ColorCodeActiveTab).Subscribe(HandleTabChangeAsync);
    }

    /// <summary>
    /// Handles tab change event
    /// </summary>
    private async Task HandleTabChangeAsync(string activeTabName)
    {
        IsActive = Name == activeTabName;

        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Invokes the button click callback
    /// </summary>
    private async Task HandleOnClickAsync()
    {
        if (HandleClick.HasDelegate)
            await HandleClick.InvokeAsync();
    }

    /// <summary>
    /// Gets CSS classes for active and inactive tab states
    /// </summary>
    private string GetTabHighlightClass() =>
        IsActive ? "bg-[var(--primary-color)] text-[var(--theme-invert-color)] font-semibold" : "hover:text-[var(--theme-invert-color)] transition-colors duration-200";

    /// <summary>
    /// Gets CSS classes for text size
    /// </summary>
    private string GetTextClass() =>
        IsActive && Name == ColorCodeFormat.Filter.GetValue() ? "text-[10px]" : "text-sm";

    /// <summary>
    /// Unsubscribes from events
    /// </summary>
    public void Dispose()
    {
        EventAggregator?.GetService(Event.ColorCodeActiveTab).Unsubscribe(HandleTabChangeAsync);
    }
}
