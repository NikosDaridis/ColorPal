<div class="grid h-9 grid-cols-5 items-center justify-center rounded-lg bg-[var(--secondary-color)] p-1">
    @foreach (ColorCodeFormat colorFormat in Enum.GetValues(typeof(ColorCodeFormat)))
    {
        <ColorCodeFormatTab Name=@colorFormat.Value()
                      IsActive=@(_currentColorCodeFormat == colorFormat)
                      HandleClick=@(() => HandleOnClickAsync(colorFormat.Value()))
                      EventAggregator=EventAggregator />
    }
</div>

@code {
    [Parameter]
    public LocalStorageService? LocalStorageService { get; set; }

    [Parameter]
    public EventAggregator<string>? EventAggregator { get; set; }

    private ColorCodeFormat _currentColorCodeFormat = ColorCodeFormat.HEX;

    /// <summary>
    /// Intializes current color code format
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        if (LocalStorageService is null)
            return;

        if (!await TryParseColorCodeFormatAsync())
            _currentColorCodeFormat = ColorCodeFormat.HEX;
    }

    /// <summary>
    /// Updates active tab and publishes the event
    /// </summary>
    private async Task HandleOnClickAsync(string colorCodeFormat)
    {
        if (LocalStorageService is null)
            return;

        await LocalStorageService.SetKeyAsync<string>(StorageKey.ColorCodeFormat, colorCodeFormat);

        if (!await TryParseColorCodeFormatAsync())
            _currentColorCodeFormat = ColorCodeFormat.HEX;

        if (EventAggregator is null)
            return;

        await EventAggregator.GetService(Event.ColorCodeActiveTab).PublishAsync(_currentColorCodeFormat.Value());
    }

    /// <summary>
    /// Tries to parse color code format
    /// </summary>
    private async Task<bool> TryParseColorCodeFormatAsync()
    {
        if (LocalStorageService is null)
            return false;

        return EnumExtensions.TryParse<ColorCodeFormat>(await LocalStorageService.GetKeyAsync<string>(StorageKey.ColorCodeFormat), out _currentColorCodeFormat);
    }
}
