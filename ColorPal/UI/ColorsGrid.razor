@implements IDisposable

<div class="grid gap-2"
     style="grid-auto-rows: 1fr;"
     id="colorsGrid">

    @if (_activeColorTool == ColorToolType.TintsShades && _tintsShadesBaseHslColor is not null)
    {
        for (int i = 0; i < _tintsShadesHexColors.Length; i++)
        {
            <ColorRectangle HEXColor=@_tintsShadesHexColors[i]
                            IsSelected=@(_selectedHexColor == _tintsShadesHexColors[i])
                            TintsShadesIndex=@(i + 1)
                            ActiveColorTool=@_activeColorTool
                            ActiveColorCodeFormat=@_activeColorCodeFormat
                            JSRuntime=JSRuntime
                            LocalStorageService=LocalStorageService
                            EventAggregator=EventAggregator />
        }
    }
    else
    {
        foreach (string hexColor in _savedColors)
        {
            <ColorRectangle HEXColor=@hexColor
                            IsSelected=@(_selectedHexColor == hexColor)
                            ActiveColorTool=@_activeColorTool
                            ActiveColorCodeFormat=@_activeColorCodeFormat
                            JSRuntime=JSRuntime
                            LocalStorageService=LocalStorageService
                            EventAggregator=EventAggregator />
        }
    }
</div>

@code {
    [Parameter]
    public IJSRuntime? JSRuntime { get; set; }

    [Parameter]
    public LocalStorageService? LocalStorageService { get; set; }

    [Parameter]
    public EventAggregator<string>? EventAggregator { get; set; }

    private string[] _savedColors = [];
    private string? _selectedHexColor;
    private ColorHSL? _tintsShadesBaseHslColor;
    private string[] _tintsShadesHexColors = new string[99];
    private ColorToolType _activeColorTool = ColorToolType.None;
    private ColorCodeFormat _activeColorCodeFormat = ColorCodeFormat.HEX;

    /// <summary>
    /// Subscribes to events
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (JSRuntime is null || LocalStorageService is null || EventAggregator is null)
            return;

        EventAggregator.GetService(Event.ColorCodeActiveTab).Subscribe(UpdateActiveColorCodeFormatAsync);
        EventAggregator.GetService(Event.ColorsPerLine).Subscribe(HandleColorsPerLineChangeAsync);
        EventAggregator.GetService(Event.SaveColor).Subscribe(RenderSavedColorsAsync);
        EventAggregator.GetService(Event.RenderTintsShades).Subscribe(HandleRenderTintsShades);
        EventAggregator.GetService(Event.DeleteSavedColor).Subscribe(RenderSavedColorsAsync);
        EventAggregator.GetService(Event.DeleteAllSavedColors).Subscribe(RenderSavedColorsAsync);
        EventAggregator.GetService(Event.SetSelectedColor).Subscribe(HandleSetSelectedColorAsync);
        EventAggregator.GetService(Event.SetActiveColorTool).Subscribe(HandleActiveColorToolAsync);

        await JSRuntime.InvokeVoidAsync(JsFuncs.InitializeColorsGridComponent.Value(), DotNetObjectReference.Create(this));

        _selectedHexColor = await LocalStorageService.GetKeyAsync<string>(StorageKey.SelectedHexColor) ?? string.Empty;
        await UpdateActiveColorCodeFormatAsync();

        await SetGridColumns(await LocalStorageService.GetKeyAsync<string>(StorageKey.ColorsPerLine) ?? "5");
        await RenderSavedColorsAsync();
    }

    [JSInvokable]
    public async Task RenderSavedColorsAsync(string? input = null)
    {
        if (LocalStorageService is null)
            return;

        _savedColors = await LocalStorageService.GetKeyAsync<string[]>(StorageKey.SavedColorsArray) ?? [];
        StateHasChanged();
    }

    private async Task UpdateActiveColorCodeFormatAsync(string? activeColorCodeFormat = null)
    {
        if (LocalStorageService is null)
            return;

        if (string.IsNullOrWhiteSpace(activeColorCodeFormat))
            activeColorCodeFormat = await LocalStorageService.GetKeyAsync<string>(StorageKey.ColorCodeFormat) ?? ColorCodeFormat.HEX.Value();

        _activeColorCodeFormat = Enum.Parse<ColorCodeFormat>(activeColorCodeFormat ?? ColorCodeFormat.HEX.Value());
        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleColorsPerLineChangeAsync(string colorsPerLine) =>
        await SetGridColumns(colorsPerLine);

    private async Task SetGridColumns(string colorsPerLine)
    {
        if (JSRuntime is null)
            return;

        await JSRuntime.InvokeVoidAsync(JsFuncs.SetGridColumns.Value(), "colorsGrid", colorsPerLine);
    }

    private async Task HandleSetSelectedColorAsync(string hexColor)
    {
        if (string.IsNullOrWhiteSpace(hexColor))
            return;

        _selectedHexColor = hexColor;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandleActiveColorToolAsync(string activeColorTool)
    {
        if (!EnumExtensions.TryParse(activeColorTool, out _activeColorTool))
            _activeColorTool = ColorToolType.None;

        if (LocalStorageService is null || EventAggregator is null)
            return;

        if (_activeColorTool != ColorToolType.TintsShades)
        {
            _tintsShadesBaseHslColor = null;
            _tintsShadesHexColors = new string[99];
            await EventAggregator.GetService(Event.ColorsPerLine).PublishAsync(await LocalStorageService.GetKeyAsync<string>(StorageKey.ColorsPerLine) ?? "5");
        }

        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandleRenderTintsShades(string hexColor)
    {
        if (JSRuntime is null || EventAggregator is null)
            return;

        await EventAggregator.GetService(Event.ColorsPerLine).PublishAsync("10");

        _tintsShadesBaseHslColor = await JSRuntime.InvokeAsync<ColorHSL>(JsFuncs.HexToHsl.Value(), hexColor);

        for (int i = 1; i < 100; i++)
            _tintsShadesHexColors[i - 1] = await JSRuntime.InvokeAsync<string>(JsFuncs.HslToHex.Value(), _tintsShadesBaseHslColor.H, _tintsShadesBaseHslColor.S, i);

        StateHasChanged();
    }

    /// <summary>
    /// Unsubscribes from events
    /// </summary>
    public void Dispose()
    {
        if (EventAggregator is null)
            return;

        EventAggregator.GetService(Event.ColorCodeActiveTab).Unsubscribe(UpdateActiveColorCodeFormatAsync);
        EventAggregator.GetService(Event.ColorsPerLine).Unsubscribe(HandleColorsPerLineChangeAsync);
        EventAggregator.GetService(Event.SaveColor).Unsubscribe(RenderSavedColorsAsync);
        EventAggregator.GetService(Event.RenderTintsShades).Unsubscribe(HandleRenderTintsShades);
        EventAggregator.GetService(Event.DeleteSavedColor).Unsubscribe(RenderSavedColorsAsync);
        EventAggregator.GetService(Event.DeleteAllSavedColors).Unsubscribe(RenderSavedColorsAsync);
        EventAggregator.GetService(Event.SetSelectedColor).Unsubscribe(HandleSetSelectedColorAsync);
        EventAggregator.GetService(Event.SetActiveColorTool).Unsubscribe(HandleActiveColorToolAsync);
    }
}
