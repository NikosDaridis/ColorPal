@implements IDisposable

<div class="grid gap-2"
     style="grid-auto-rows: 1fr;"
     id="colorsGrid">

    @foreach (string hexColor in _savedColors)
    {
            <ColorRectangle HEXColor=@hexColor IsSelected=@(_selectedHexColor == hexColor) ActiveColorTool=@_activeColorTool EventAggregator=EventAggregator />
    }
</div>

@code {
    [Parameter]
    public IJSRuntime? JSRuntime { get; set; }

    [Parameter]
    public LocalStorageService? LocalStorageService { get; set; }

    [Parameter]
    public EventAggregator<string>? EventAggregator { get; set; }

    private string[] _savedColors = [];
    private string? _selectedHexColor;
    private ColorToolType _activeColorTool = ColorToolType.None;

    /// <summary>
    /// Subscribes to events
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (JSRuntime is null || LocalStorageService is null || EventAggregator is null)
            return;

        EventAggregator.GetService(Event.ColorsPerLine).Subscribe(HandleColorsPerLineChangeAsync);
        EventAggregator.GetService(Event.SaveColor).Subscribe(RenderSavedColorsAsync);
        EventAggregator.GetService(Event.DeleteAllSavedColors).Subscribe(RenderSavedColorsAsync);
        EventAggregator.GetService(Event.SetSelectedColor).Subscribe(HandleSetSelectedColorAsync);
        EventAggregator.GetService(Event.SetActiveColorTool).Subscribe(HandleActiveColorToolAsync);

        _selectedHexColor = await LocalStorageService.GetKeyAsync<string>(StorageKey.SelectedHexColor) ?? string.Empty;

        await SetGridColumns(await LocalStorageService.GetKeyAsync<string>(StorageKey.ColorsPerLine) ?? "5");
        await RenderSavedColorsAsync();
    }

    private async Task HandleColorsPerLineChangeAsync(string colorsPerLine) =>
        await SetGridColumns(colorsPerLine);

    private async Task SetGridColumns(string colorsPerLine)
    {
        if (JSRuntime is null)
            return;

        await JSRuntime.InvokeVoidAsync(JsFuncs.SetGridColumns.Value(), "colorsGrid", colorsPerLine);
    }

    private async Task RenderSavedColorsAsync(string? input = null)
    {
        if (LocalStorageService is null)
            return;

        _savedColors = await LocalStorageService.GetKeyAsync<string[]>(StorageKey.SavedColorsArray) ?? [];
        StateHasChanged();
    }

    private async Task HandleSetSelectedColorAsync(string hexColor)
    {
        if (string.IsNullOrWhiteSpace(hexColor))
            return;

        _selectedHexColor = hexColor;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandleActiveColorToolAsync(string activeColorTool)
    {
        _activeColorTool = activeColorTool switch
        {
            _ when activeColorTool == ColorToolType.Move.Value() => ColorToolType.Move,
            _ when activeColorTool == ColorToolType.TintsShades.Value() => ColorToolType.TintsShades,
            _ when activeColorTool == ColorToolType.Delete.Value() => ColorToolType.Delete,
            _ => ColorToolType.None
        };

        StateHasChanged();
        await Task.CompletedTask;
    }

    /// <summary>
    /// Unsubscribes from events
    /// </summary>
    public void Dispose()
    {
        if (EventAggregator is null)
            return;

        EventAggregator.GetService(Event.ColorsPerLine).Unsubscribe(HandleColorsPerLineChangeAsync);
        EventAggregator.GetService(Event.SaveColor).Unsubscribe(RenderSavedColorsAsync);
        EventAggregator.GetService(Event.DeleteAllSavedColors).Unsubscribe(RenderSavedColorsAsync);
        EventAggregator.GetService(Event.SetSelectedColor).Unsubscribe(HandleSetSelectedColorAsync);
        EventAggregator.GetService(Event.SetActiveColorTool).Subscribe(HandleActiveColorToolAsync);
    }
}
