@implements IDisposable

<div class="mt-2 space-y-2">
    <div class="flex items-center space-x-2">
        <button class="inline-flex h-8 w-10 items-center justify-center rounded-md border border-[var(--secondary-color)] bg-[var(--primary-color)] font-medium hover:bg-[var(--secondary-color)]">
            <img class="theme-filter h-[15px] w-[15px]"
                 src="Icons/copyClipboard.svg" />
        </button>

        <input type="text"
               class="text-md flex h-8 w-full rounded-md border border-[var(--secondary-color)] bg-[var(--primary-color)] px-3 py-2 text-sm text-[var(--theme-invert-color)]"
               value="@_colorCodeValue"
               readonly>
    </div>
</div>

@code {
    [Parameter]
    public IJSRuntime? JSRuntime { get; set; }

    [Parameter]
    public LocalStorageService? LocalStorageService { get; set; }

    [Parameter]
    public EventAggregator<string>? EventAggregator { get; set; }

    private ColorCodeFormat _activecolorCodeFormat = ColorCodeFormat.HEX;
    private string _colorCodeValue = string.Empty;

    /// <summary>
    /// Subscribes to events
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (LocalStorageService is null || EventAggregator is null)
            return;

        EventAggregator.GetService(Event.ColorCodeActiveTab).Subscribe(UpdateActiveColorCodeAsync);
        EventAggregator.GetService(Event.SetSelectedColor).Subscribe(UpdateColorCodeAsync);

        _activecolorCodeFormat = Enum.Parse<ColorCodeFormat>(await LocalStorageService.GetKeyAsync<string>(StorageKey.ColorCodeFormat) ?? ColorCodeFormat.HEX.GetValue());
        await UpdateColorCodeAsync(await LocalStorageService.GetKeyAsync<string>(StorageKey.SelectedColor) ?? string.Empty);
    }

    private async Task UpdateActiveColorCodeAsync(string? activeColorCodeFormat)
    {
        _activecolorCodeFormat = Enum.Parse<ColorCodeFormat>(activeColorCodeFormat ?? ColorCodeFormat.HEX.ToString());

        if (LocalStorageService is null)
            return;

        await UpdateColorCodeAsync(await LocalStorageService.GetKeyAsync<string>(StorageKey.SelectedColor) ?? string.Empty);
    }

    private async Task UpdateColorCodeAsync(string hexColor)
    {
        if (JSRuntime is null || string.IsNullOrWhiteSpace(hexColor))
            return;

        _colorCodeValue = _activecolorCodeFormat switch
        {
            ColorCodeFormat.HEX => hexColor,
            ColorCodeFormat.RGB => await JSRuntime.InvokeAsync<string>("hexToRgb", hexColor, "string"),
            ColorCodeFormat.HSL => await JSRuntime.InvokeAsync<string>("hexToHsl", hexColor, "string"),
            ColorCodeFormat.HSV => await JSRuntime.InvokeAsync<string>("hexToHsv", hexColor, "string"),
            ColorCodeFormat.Filter => "TODO",
            _ => hexColor
        };

        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Unsubscribes from events
    /// </summary>
    public void Dispose()
    {
        EventAggregator?.GetService(Event.ColorCodeActiveTab).Unsubscribe(UpdateActiveColorCodeAsync);
        EventAggregator?.GetService(Event.SetSelectedColor).Unsubscribe(UpdateColorCodeAsync);
    }
}
