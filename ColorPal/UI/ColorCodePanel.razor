@implements IDisposable

<div class="mt-2 space-y-2">
    <div class="flex items-center space-x-2">
        <button class="inline-flex h-8 w-10 items-center justify-center rounded-md border border-[var(--secondary-color)] bg-[var(--primary-color)] font-medium hover:bg-[var(--secondary-color)]">
            <img class="theme-filter h-[15px] w-[15px]"
                 src="Icons/copyClipboard.svg" />
        </button>

        <input type="text"
               class="text-md flex h-8 w-full rounded-md border border-[var(--secondary-color)] bg-[var(--primary-color)] px-3 py-2 text-sm text-[var(--theme-invert-color)]"
               value="@_inputValue"
               readonly>
    </div>
</div>

@code {
    [Parameter]
    public LocalStorageService? LocalStorageService { get; set; }

    [Parameter]
    public EventAggregator<string>? EventAggregator { get; set; }

    private string _inputValue = string.Empty;


    /// <summary>
    /// Subscribes to events
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (LocalStorageService is not null)
            await HandleActiveTabChange(await LocalStorageService.GetKeyAsync<string>(StorageKey.ColorCodeFormat));

        EventAggregator?.GetService(Event.ColorCodeActiveTab).Subscribe(HandleActiveTabChange);
    }

    /// <summary>
    /// Handles active tab change event
    /// </summary>
    private async Task HandleActiveTabChange(string? activeTabName)
    {
        _inputValue = $"Value for {activeTabName}";

        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Unsubscribes from events
    /// </summary>
    public void Dispose()
    {
        EventAggregator?.GetService(Event.ColorCodeActiveTab).Unsubscribe(HandleActiveTabChange);
    }
}
